generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
    // binaryTargets = ["native", "rhel-openssl-1.1.x"]
    // previewFeatures = ["filteredRelationCount"]
    // previewFeatures = ["multiSchema"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    // schemas  = ["public", "ekontrak"]
}

enum JK {
    L
    P
}

model users {
    user_id               Int           @id @default(autoincrement())
    user_opd              Int
    user_nama             String
    user_nip              String?       @unique
    user_nik              String        @unique
    user_name             String        @unique
    user_pass             String
    user_image            String?
    user_tmp_lahir        String
    user_tgl_lahir        DateTime      @db.Date
    user_pendidikan_akhir Int
    user_level            Int
    user_email            String
    user_nohp             String
    user_alamat           String
    user_jk               JK
    user_ttd              Boolean       @default(false)
    user_jabatan          Int
    user_pangkat          String?
    user_jumlah_anak      Int           @default(0)
    user_active           Boolean
    user_external         Boolean       @default(false)
    user_lastip           String?
    user_lastlogin        DateTime?
    user_created          DateTime      @default(now())
    user_updated          DateTime      @updatedAt
    user_deleted          DateTime?
    spt_pegawai           spt_pegawai[]
    pj                    spt[]         @relation(name: "pj")
    pj2                   spt[]         @relation(name: "pj2")
    opd                   opd           @relation(fields: [user_opd], references: [opd_id])
    jabatan               jabatan       @relation(fields: [user_jabatan], references: [jabatan_id])
    sumberdana            sumberdana[]  @relation(name: "sumberdana_pptk")
    sumberdana_bendahara  sumberdana[]  @relation(name: "sumberdana_bendahara")
    sumberdana_pa         sumberdana[]  @relation(name: "sumberdana_pa")
    bank                  bank[]
    gajian                gajian[]
}

model dasar {
    dasar_id      Int       @id @default(autoincrement())
    dasar_isi     String
    dasar_opd     Int
    dasar_active  Boolean
    dasar_created DateTime  @default(now())
    dasar_updated DateTime  @updatedAt
    dasar_deleted DateTime?
}

model spt {
    spt_id            Int           @id @default(autoincrement())
    spt_seq           Int
    spt_tahun         Int           @db.Year
    spt_nomor         String
    spt_opd           Int
    spt_kota_asal     Int
    spt_kota_tujuan   Int
    spt_kota_tujuan2  Int?
    spt_tempat_tujuan String
    spt_via           Int
    spt_tgl_brkt      DateTime      @db.Date
    spt_tgl_kembali   DateTime      @db.Date
    spt_lama          Int
    spt_perihal       String        @db.Text
    spt_kategori      Int
    spt_kegiatan      Int
    spt_sumber_dana   Int
    spt_pj            Int
    spt_pj2           Int
    spt_dasar         String?
    spt_status        Int           @default(1)
    spt_created       DateTime      @default(now())
    spt_updated       DateTime      @updatedAt
    spt_deleted       DateTime?
    spt_pegawai       spt_pegawai[]
    users_pj          users         @relation(name: "pj", fields: [spt_pj], references: [user_id], onDelete: Cascade)
    users_pj2         users         @relation(name: "pj2", fields: [spt_pj2], references: [user_id], onDelete: Cascade)
    kota_asal         kota          @relation(name: "asal", fields: [spt_kota_asal], references: [kota_id], onDelete: Cascade)
    kota_tujuan       kota          @relation(name: "tujuan", fields: [spt_kota_tujuan], references: [kota_id], onDelete: Cascade)
    kota_tujuan2      kota?         @relation(name: "tujuan2", fields: [spt_kota_tujuan2], references: [kota_id], onDelete: Cascade)
    opd               opd           @relation(fields: [spt_opd], references: [opd_id])
    kegiatan          kegiatan      @relation(fields: [spt_kegiatan], references: [kegiatan_id])
    sumber_dana       sumberdana    @relation(fields: [spt_sumber_dana], references: [sd_id])
    kategori          kategori      @relation(fields: [spt_kategori], references: [kategori_id])
    kota              kota?         @relation(fields: [kotaKota_id], references: [kota_id])
    kotaKota_id       Int?

    @@unique([spt_nomor, spt_opd])
    @@unique([spt_seq, spt_kegiatan, spt_tahun], name: "sptUnique", map: "spt_unique")
}

model spt_pegawai {
    sp_id         Int       @id @default(autoincrement())
    sp_spt        Int
    sp_user       Int
    sp_nomor_sppd String    @unique
    sp_seq        Int
    spt           spt       @relation(fields: [sp_spt], references: [spt_id], onDelete: Cascade)
    users         users     @relation(fields: [sp_user], references: [user_id], onDelete: Cascade)
    biaya         biaya[]
    npd           npd[]
    laporan       laporan?
    kwitansi      kwitansi?

    @@unique([sp_spt, sp_user])
}

model npd {
    npd_spt_pegawai Int         @id
    npd_tgl         DateTime
    npd_nominal     BigInt
    npd_created     DateTime    @default(now())
    npd_updated     DateTime    @updatedAt
    spt_pegawai     spt_pegawai @relation(fields: [npd_spt_pegawai], references: [sp_id], onDelete: Cascade)
}

model biaya {
    biaya_komponen    Int
    biaya_standard    Int
    biaya_nilai       Int
    //nama operator
    biaya_keterangan1 String?
    // kode booking
    biaya_keterangan2 String?
    //nomor tiket
    biaya_keterangan3 String?
    // keterangan lain
    biaya_keterangan4 String?
    biaya_bukti       String?
    biaya_created     DateTime    @default(now())
    biaya_updated     DateTime?   @updatedAt
    biaya_spt_pegawai Int
    spt_pegawai       spt_pegawai @relation(fields: [biaya_spt_pegawai], references: [sp_id])

    @@id([biaya_komponen, biaya_spt_pegawai])
}

model provinsi {
    provinsi_id   Int    @id
    provinsi_nama String
    kota          kota[]
}

model kota {
    kota_id           Int        @id
    kota_provinsi     Int
    kota_nama         String
    kota_dalam_daerah Boolean    @default(false)
    kota_created      DateTime   @default(now())
    kota_updated      DateTime   @updatedAt
    kota_deleted      DateTime?
    kota_asal         spt[]      @relation(name: "asal")
    kota_tujuan       spt[]      @relation(name: "tujuan")
    kota_tujuan2      spt[]      @relation(name: "tujuan2")
    spt               spt[]
    provinsi          provinsi?  @relation(fields: [kota_provinsi], references: [provinsi_id])
    standard_asal     standard[] @relation(name: "standard_asal")
    standard_tujuan   standard[] @relation(name: "standard_tujuan")
}

model laporan {
    laporan_id          Int         @id @default(autoincrement())
    laporan_spt_pegawai Int         @unique
    laporan_isi         String
    laporan_created     DateTime    @default(now())
    laporan_updated     DateTime    @updatedAt
    spt_pegawai         spt_pegawai @relation(fields: [laporan_spt_pegawai], references: [sp_id], onDelete: Cascade)
}

model setting {
    setting_id         String
    setting_opd        Int
    setting_value      String
    setting_lastupdate DateTime @updatedAt
    opd                opd      @relation(fields: [setting_opd], references: [opd_id])

    @@id([setting_id, setting_opd])
}

model kegiatan {
    kegiatan_id          Int          @id @default(autoincrement())
    kegiatan_opd         Int
    kegiatan_kode        String       @unique
    kegiatan_program     String
    kegiatan_nama        String
    kegiatan_subkegiatan String
    kegiatan_created     DateTime     @default(now())
    kegiatan_updated     DateTime     @updatedAt
    kegiatan_deleted     DateTime?
    sumberdana           sumberdana[]
    spt                  spt[]
    opd                  opd          @relation(fields: [kegiatan_opd], references: [opd_id])
}

model sumberdana {
    sd_id             Int          @id @default(autoincrement())
    sd_tahun          String
    sd_opd            Int
    sd_kode_rekening  String
    sd_nama           String
    sd_kegiatan       Int
    sd_jumlah         BigInt
    sd_pptk           Int
    sd_pa             Int
    sd_bendahara      Int
    sd_active         Boolean
    sd_app            String       @default("sppd") @db.Char(5)
    sd_created        DateTime     @default(now())
    sd_updated        DateTime     @updatedAt
    sd_deleted        DateTime?
    opd               opd          @relation(fields: [sd_opd], references: [opd_id])
    kegiatan          kegiatan     @relation(fields: [sd_kegiatan], references: [kegiatan_id])
    users             users        @relation(name: "sumberdana_pptk", fields: [sd_pptk], references: [user_id])
    spt               spt[]
    bendahara         users        @relation(name: "sumberdana_bendahara", fields: [sd_bendahara], references: [user_id])
    pengguna_anggaran users        @relation(name: "sumberdana_pa", fields: [sd_pa], references: [user_id])
    ttd_gajian        ttd_gajian[]
}

model opd {
    opd_id      Int          @id @default(autoincrement())
    opd_nama    String
    opd_alamat  String
    opd_email   String
    opd_telp    String
    opd_kota    String
    opd_created DateTime     @default(now())
    opd_updated DateTime     @updatedAt
    opd_deleted DateTime?
    users       users[]
    spt         spt[]
    setting     setting[]
    sumberdana  sumberdana[]
    standard    standard[]
    kegiatan    kegiatan[]
}

model jabatan {
    jabatan_id          Int       @id @default(autoincrement())
    jabatan_opd         Int
    jabatan_nama        String
    jabatan_kop_surat   Int?
    jabatan_kelas_biaya Int
    jabatan_kwitansi    Int?
    jabatan_kelompok    Int?
    jabatan_created     DateTime  @default(now())
    jabatan_updated     DateTime  @updatedAt
    jabatan_deleted     DateTime?
    users               users[]
}

model kwitansi {
    kwitansi_spt_pegawai Int         @id
    kwitansi_nomor       String
    kwitansi_opd         Int
    kwitansi_created     DateTime    @default(now())
    kwitansi_updated     DateTime    @updatedAt
    spt_pegawai          spt_pegawai @relation(fields: [kwitansi_spt_pegawai], references: [sp_id])

    @@unique([kwitansi_nomor, kwitansi_opd])
}

model kategori {
    kategori_id      Int       @id @default(autoincrement())
    kategori_nama    String
    kategori_opd     Int
    kategori_created DateTime  @default(now())
    kategori_updated DateTime  @updatedAt
    kategori_deleted DateTime?
    spt              spt[]
}

model standard {
    standard_id          Int       @id @default(autoincrement())
    standard_kode        Int
    standard_opd         Int
    standard_kota_asal   Int
    standard_kota_tujuan Int
    standard_via         Int
    standard_kelas       Int
    standard_nominal     Int
    // standard_harian              Int
    // standard_transportasi_pergi  Int
    // standard_transportasi_pulang Int
    // standard_penginapan          Int
    // standard_representasi        Int?
    // standard_taxi_dalam          Int
    // standard_taxi_luar           Int
    standard_created     DateTime  @default(now())
    standard_updated     DateTime  @updatedAt
    standard_deleted     DateTime?
    kota_asal            kota?     @relation(name: "standard_asal", fields: [standard_kota_asal], references: [kota_id], onDelete: Cascade)
    kota_tujuan          kota?     @relation(name: "standard_tujuan", fields: [standard_kota_tujuan], references: [kota_id], onDelete: Cascade)
    opd                  opd       @relation(fields: [standard_opd], references: [opd_id])

    @@unique([standard_kode, standard_opd, standard_kota_asal, standard_kota_tujuan, standard_via, standard_kelas], name: "standardUnique", map: "standard_unique")
}

model bank {
    bank_user    Int    @id
    bank_name    Int
    bank_account String
    bank_number  String
    user         users  @relation(fields: [bank_user], references: [user_id])
}

model tunjangan_potongan {
    tp_id       Int       @id @default(autoincrement())
    tp_jenis    Int
    tp_nama     String
    tp_urutan   Int
    tp_kelompok Int
    tp_created  DateTime  @default(now())
    tp_update   DateTime  @updatedAt
    tp_deleted  DateTime?
    gajian      gajian[]
}

model gajian {
    gajian_id                 Int                @id @default(autoincrement())
    gajian_pegawai            Int
    gajian_bulan              Int
    gajian_tahun              Int                @db.Year
    gajian_tunjangan_potongan Int
    gajian_nominal            Int
    gajian_created            DateTime           @default(now())
    gajian_updated            DateTime           @updatedAt
    gajian_deleted            DateTime?
    users                     users              @relation(fields: [gajian_pegawai], references: [user_id])
    tunjangan_potongan        tunjangan_potongan @relation(fields: [gajian_tunjangan_potongan], references: [tp_id])

    @@unique([gajian_pegawai, gajian_bulan, gajian_tahun, gajian_tunjangan_potongan], name: "gajianUnique", map: "gajian_unique")
}

model ttd_gajian {
    ttd_id         Int        @id @default(autoincrement())
    ttd_bulan      Int
    ttd_tahun      Int        @db.Year
    ttd_sumberdana Int
    sumberdana     sumberdana @relation(fields: [ttd_sumberdana], references: [sd_id])
    ttd_created    DateTime
    ttd_updated    DateTime   @updatedAt
    ttd_deleted    DateTime?

    @@unique([ttd_bulan, ttd_tahun], name: "ttdUnique", map: "ttd_unique")
}
